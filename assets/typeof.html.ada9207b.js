import{_ as o,X as c,Y as p,Z as s,$ as n,a1 as t,a2 as e,y as i}from"./framework.ba356234.js";const l="/assets/images/typeof-1.png",u="/assets/images/instanceof.png",r="/assets/images/typeof-2.png",d="/assets/images/typeof-3.png",k="/assets/images/constructor.png",b={},m=e('<div class="custom-container tip"><p class="custom-container-title">🌏 简单介绍</p><p>💡 ES5 中有五种基本（原始）数据类型 <code>undefined，null，boolean，number，string，ES6</code> 中新增了一种基本数据类型：<code>Symbol</code> 。<code>typeof</code> 是我们开发中最常用的判断数据类型的 JS 原生内置运算符，但是有局限性。</p></div><h2 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h2><p>如果在项目实际开发过程中，习惯性的使用 typeof 进行数据类型判断；尽管这样的内置方法是最快最便捷的，但是在一定程度上， 也是会有局限性的；</p><p>typeof 的局限性暂时不说， 拿一个例子来说，在开发某个功能的时候，后端给了我这样一组数据， 这数据类型可能是数组，也可能是对象， 还有可能是 null；</p><p>如果给你这么一组数据， 你会怎么进行数据类型的判断；使用 typeof 判断； 也是可也， 但这里就要说明一下它的局限性了；参考下图:</p><figure><img src="'+l+'" alt="typeof" tabindex="0" loading="lazy"><figcaption>typeof</figcaption></figure><p>是不是你会怀疑， 为什么会是 <code>“object”</code> ;</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"><code>typeof null</code> 返回的是 <code>object</code>, 在最初的版本中，使用的为 32 位系统，为了性能考虑使用低位存储了变量的类型信息，000 开头代表是对象，然而 <code>null</code> 表示为全零，所以将它错误的判断为 <code>object</code>，然后被 ECMAScript 沿用了 。</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"><code>typeof</code> 不能准确的判断具体是什么对象；例如：<code>typeof new Date()</code> 不会返回的是 Date 对象，而数组也是最不能忍受的；</label></li></ul><h2 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceof</h2><p><code>instanceof</code>也可以判断对象类型，因为内部机制是通过判断对象的原型链中是不是能找到类型的 <code>prototype</code>。但是，并不适用于一些基本数据类型。</p><figure><img src="'+u+'" alt="instanceof" tabindex="0" loading="lazy"><figcaption>instanceof</figcaption></figure><h2 id="object-prototype-tostring" tabindex="-1"><a class="header-anchor" href="#object-prototype-tostring" aria-hidden="true">#</a> Object.prototype.toString()</h2>',12),f={id:"它是一个什么-参考资料-object-prototype-tostring-。",tabindex:"-1"},h=s("a",{class:"header-anchor",href:"#它是一个什么-参考资料-object-prototype-tostring-。","aria-hidden":"true"},"#",-1),g={href:"https://es5.github.io/#x15.2.4.2",target:"_blank",rel:"noopener noreferrer"},y=e('<figure><img src="'+r+`" alt="typeof" tabindex="0" loading="lazy"><figcaption>typeof</figcaption></figure><blockquote><p>当 toString 方法被调用的时候，下面的步骤会被执行：</p></blockquote><ol><li>如果 this 值是 undefined，就返回 [object Undefined]；</li><li>如果 this 的值是 null，就返回 [object Null]；</li><li>让 O 成为 ToObject(this) 的结果；</li><li>让 class 成为 O 的内部属性 [[Class]] 的值；</li><li>最后返回由 &quot;[object &quot; 和 class 和 &quot;]&quot; 三个部分组成的字符串；</li></ol><p>简单的说，<code>Object.prototype.toString.call()</code>默认返回的格式为<code>[object 数据类型]</code>； 如果 <code>this 为 undefined </code>的情况，则：<code>[object Undefined]</code>; 可参考以下 demo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Array]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="可以校验那些数据类型呢" tabindex="-1"><a class="header-anchor" href="#可以校验那些数据类型呢" aria-hidden="true">#</a> 可以校验那些数据类型呢?</h3><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 至少下面的图片中的类型都是可以校验的;</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> 包括基本类型和复杂类型；</label></li></ul><figure><img src="`+d+`" alt="typeof" tabindex="0" loading="lazy"><figcaption>typeof</figcaption></figure><p>进一步的我们可以封装一个 检验数据类型的方法，可参考如下代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> dataMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token string">&quot;Number String Boolean Null Undefined Null Object Array Date Error RegExp Function Math JSON&quot;</span>
	<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		dataMap<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[object </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>item<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 添加这行代码是因为 在IE6 会有兼容性 直接返回 [object Object]</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> obj <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span>
		<span class="token operator">?</span> dataMap<span class="token punctuation">[</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&quot;object&quot;</span>
		<span class="token operator">:</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">type</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
<span class="token function">type</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h2><blockquote><p>这种方式是判断对象的构造函数是谁，从而进行判断；</p></blockquote><figure><img src="`+k+'" alt="constructor" tabindex="0" loading="lazy"><figcaption>constructor</figcaption></figure><blockquote><p>plainObject, EmptyObject, isArrayLike 暂未研究</p></blockquote><h3 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h3>',15),v={class:"task-list-container"},_={class:"task-list-item"},j=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-4",checked:"checked",disabled:"disabled"},null,-1),x={class:"task-list-item-label",for:"task-item-4"},q={href:"https://github.com/mqyqingfeng/Blog/issues/28",target:"_blank",rel:"noopener noreferrer"},S={class:"task-list-item"},w=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-5",checked:"checked",disabled:"disabled"},null,-1),O={class:"task-list-item-label",for:"task-item-5"},E={href:"https://github.com/mqyqingfeng/Blog/issues/30",target:"_blank",rel:"noopener noreferrer"};function N(B,z){const a=i("ExternalLinkIcon");return c(),p("div",null,[m,s("h3",f,[h,n(" 它是一个什么？参考资料 "),s("a",g,[n("Object.prototype.toString()"),t(a)]),n("。")]),y,s("ul",v,[s("li",_,[j,s("label",x,[s("a",q,[n("js 类型判断专题(上)"),t(a)])])]),s("li",S,[w,s("label",O,[s("a",E,[n("js 类型判断专题(下)"),t(a)])])])])])}const A=o(b,[["render",N],["__file","typeof.html.vue"]]);export{A as default};
