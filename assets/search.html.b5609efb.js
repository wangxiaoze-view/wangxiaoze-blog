import{_ as o,X as p,Y as c,Z as n,$ as s,a1 as t,a2 as e,y as i}from"./framework.ba356234.js";const l="/assets/images/search_1.png",u="/assets/images/search_2.png",d={},r=e('<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><div class="custom-container tip"><p class="custom-container-title">一个系统功能异常优化</p><p>普通的输入框，做一个搜索的功能，那么对于搜索，输入直接调用接口就好了， 为什么还要值得做记录总结呢？</p><p>是因为，搜索查询并不是你想象中的直接调用接口就可以了；考虑的因素也是挺多的，例如，搜索优化，不对服务器造成并发影响； 间隔搜索等等，一般行为，为了不频繁请求接口，我们都会使用<code>节流函数</code>优化，或者失去焦点再去请求也是可以的；</p><p>但是对于及查及显示的功能原则，这是就不能使用失焦查询了；这里的功能例如： 地址查询等等；</p><p>那么输入查询也会出现另外的一个弊端， 那就是中文字符的影响，下面会说明 <code>bug</code> 复现的过程和解决方案!</p></div><h2 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h2><ul><li>常见的搜索查询无非就那么几种，端与端的搜索也就是移动端与 pc 端；</li><li>如果是移动端仅仅需要处理的是频繁请求的问题；避免频繁请求造成的服务器的压力;</li><li>如果是 pc 端，就不是仅仅需要处理频繁请求的问题了； 并且你在 <code>input</code> 的情况下还要处理另外一种情况，输入中文有中文字符的情况；</li><li>平常的搜索都是输入框， 按钮查询搜索;</li></ul><h2 id="问题分析复盘" tabindex="-1"><a class="header-anchor" href="#问题分析复盘" aria-hidden="true">#</a> 问题分析复盘</h2><p>在原有的功能上去选择化的维护与扩展；其中有关联单号，其实是个搜索查询功能, 查询输入的手机号关联的业主最新前三单的信息;</p><p>因为当时考虑用户搜索查询方便，特处理输入框的事件为 oninput, 这样直接输入查询内容，在处理频繁请求的基础上去请求数据；这样就可以随查随时显示了；</p><p>而不选择 onchange, onblur 是因为俩者都是失去焦点再去请求;</p><p>针对三者的区别，我做了一下总结：</p><ul><li><code>oninput</code>: 只要输入， 输入框由内容则会执行，但是这里要区分一个问题：</li><li><code>onchange, onblur相同点</code>: 俩者都是失去焦点之后再出处理对应的逻辑；</li><li><code>onchange, onblur不同点</code>: <code>oncahnge</code>是在输入的基础上才会执行，而<code>onblur</code>不论是否输入都会执行；</li></ul><p><strong>但是：<code>oninput</code>要做一个区别，就是 pc 有其他输入法的情况下是以正常执行的，输入框不会有输入的文字或者字母， 而 Windows 自带的输入法，在输入框切换中文再去输入的情况，会将输入的英文先显示在输入框中，那样就会出现输入一个字符就会去请求一次；这样的情况就可以造成接口返回异常或者错误信息;</strong></p><h2 id="效果预览" tabindex="-1"><a class="header-anchor" href="#效果预览" aria-hidden="true">#</a> 效果预览</h2><blockquote><p>以下效果都是在 <code>windows</code>下的效果；</p></blockquote><h3 id="使用其他的输入法" tabindex="-1"><a class="header-anchor" href="#使用其他的输入法" aria-hidden="true">#</a> 使用其他的输入法</h3><figure><img src="'+l+'" alt="使用其他的输入法" tabindex="0" loading="lazy"><figcaption>使用其他的输入法</figcaption></figure><h3 id="windows-自带的输入法" tabindex="-1"><a class="header-anchor" href="#windows-自带的输入法" aria-hidden="true">#</a> windows 自带的输入法</h3><figure><img src="'+u+'" alt="自带的输入法" tabindex="0" loading="lazy"><figcaption>自带的输入法</figcaption></figure><blockquote><p>windows 自带的输入法，在这样的情况下会走请求， 还是有特殊符号的情况，如果在这样的情况下后端可能会报错；</p></blockquote><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h2>',19),k=n("li",null,[s("将 "),n("code",null,"oninput"),s(" 事件换成 "),n("code",null,"onchange, onblur"),s(" 事件，只有当失去焦点的情况下才会去请求， 这样可能会造成功能疑惑问题；都输入了怎么不执行呢？怎么没有数据呢？怎么操作？")],-1),h=n("li",null,[s("同样，继续使用 oninput 事件；不过在这基础上还要执行俩个事件 "),n("code",null,"compositionstart, compositionend"),s(";")],-1),m=n("code",null,"compositionstart",-1),v=n("code",null,"compositionend",-1),b=n("code",null,"compositionend",-1),g={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionend_event",target:"_blank",rel:"noopener noreferrer"},f={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionstart_event",target:"_blank",rel:"noopener noreferrer"},_=e(`<h2 id="实例代码" tabindex="-1"><a class="header-anchor" href="#实例代码" aria-hidden="true">#</a> 实例代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// isInput 判断的是是否合并结束， 默认结束</span>
<span class="token keyword">let</span> isInput <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
getOrderDemo
	<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>
		<span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span>
		<span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 如果合并结束完成则， 进行下一步的逻辑操作; 没有结束合并  不会执行;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>isInput<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s|\\r|\\t|\\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// ...code there 执行对应的逻辑操作;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>
	<span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;keyup&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;compositionstart&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 当执行如图二的情况下，说明还在合并，并没有结束</span>
		isInput <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;compositionend&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 执行到这一步说明  合并结束， 当合并结束时，执行input</span>
		isInput <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function x(w,q){const a=i("ExternalLinkIcon");return p(),c("div",null,[r,n("ul",null,[k,h,n("li",null,[m,s(" 开始新的输入合成时会触发， "),v,s(" 当文本段落的组成完成或取消时，"),b,s(" 事件将被触发 (具有特殊字符的触发，需要一系列键和其他输入，如语音识别或移动中的字词建议)。"),n("a",g,[s("compositionend"),t(a)]),s(),n("a",f,[s("compositionstart"),t(a)])])]),_])}const I=o(d,[["render",x],["__file","search.html.vue"]]);export{I as default};
