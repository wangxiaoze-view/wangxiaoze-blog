import{_ as a,X as s,Y as n,a2 as e}from"./framework.ba356234.js";const t={},c=e(`<div class="custom-container tip"><p class="custom-container-title">🌏 简单介绍</p><p>💡 <code>parseInt</code> 是解析一个字符串并返回指定基数的十进制整数，<code>radix</code> 是<code>2-36</code>之间的整数，表示被解析字符串的基数。如果 <code>radix</code> 超过<code> 2-36</code> 的范围则返回 <code>NaN</code>;</p></div><h2 id="parseint-的解读" tabindex="-1"><a class="header-anchor" href="#parseint-的解读" aria-hidden="true">#</a> parseInt 的解读</h2><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h3><blockquote><p><code>parseInt</code>的参数有俩个， 第一个为解析的字符串， 第二个为指定的基数；语法： <code>parseInt(string, radix)</code></p></blockquote><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> string: 解析的字符串，如果不是字符的情况下，则将他转为字符 (<code>toString()</code> 抽象方法操作); 如字符前面是否空格默认将空格去除；</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> radix(可选参数): <code>2-36</code>范围内， 标识字符串的基数；</label></li></ul><h3 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值" aria-hidden="true">#</a> 返回值</h3><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 解析出的一个整数， 数字；</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> 返回 NaN；如果返回<code>NaN</code>则满足俩点： 1. <code>radix</code>小于 2 或 大于 36； 2. 第一个非空格字符不能转换为数字。</label></li></ul><h3 id="demo" tabindex="-1"><a class="header-anchor" href="#demo" aria-hidden="true">#</a> DEMO</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;1234&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 194</span>
<span class="token comment">// 解读</span>
<span class="token comment">// 解析字符 &quot;1234&quot;, 按5进制(5基数)进行转换， 转换公式为：</span>
<span class="token comment">// 1*5^3 + 2*5^2 + 3*5^1 + 4*5^0 = 125 + 50 + 15 + 4 = 194;</span>

<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;1234&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token comment">// 解读</span>
<span class="token comment">// 因为 radix 基数范围为 2-36， 而代码中的基数为100  则返回NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="radix-不同的情况-undefined-0-或者未定义的情况" tabindex="-1"><a class="header-anchor" href="#radix-不同的情况-undefined-0-或者未定义的情况" aria-hidden="true">#</a> radix 不同的情况： undefined, 0 或者未定义的情况；</h3><ol><li>如果输入的字符以 <code>0x,0X</code>(一个 0，后面为大写或者小写的 x)开头， 那么 <code>radix</code> 被默认为 16，字符串的其余部分被当做 16 进制(基数)去解析；</li><li>如果输入的字符以 <code>0, O </code>开头， <code>radix</code> 被假设为 8 进制或 10 进制；ECMAScript 5 澄清了应该使用 10 (十进制)，但不是所有的浏览器都支持。因此，在使用 <code>parseInt</code> 时，一定要指定一个 radix。</li><li>如果输入的 string 以任何其他值开头，<code>radix</code> 是 10 (十进制)。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;0xF&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 解读：</span>
<span class="token comment">// 符合上面1情况， 以0x 或者 0X 开头， 默认为16进制（基数）</span>
<span class="token comment">// parseInt(&quot;0xF&quot;) === parseInt(&quot;0xF&quot;, 16);</span>

<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;021&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 解读：</span>
<span class="token comment">// 符合上面2情况， 以0 ， 默认为8进制或者10进制</span>
<span class="token comment">// parseInt(&quot;021&quot;) === parseInt(&quot;021&quot;, 10);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-map-的解读" tabindex="-1"><a class="header-anchor" href="#array-map-的解读" aria-hidden="true">#</a> Array.map 的解读</h2><h3 id="参数-1" tabindex="-1"><a class="header-anchor" href="#参数-1" aria-hidden="true">#</a> 参数</h3><blockquote><p><code>Array.map()</code>有三个参数， 如下源码：</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Calls a defined callback function on each element of an array, and returns an array that contains the results.
 * <span class="token keyword">@param</span> <span class="token parameter">callbackfn</span> A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.
 * <span class="token keyword">@param</span> <span class="token parameter">thisArg</span> An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
 */</span>
map<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token function-variable function">callbackfn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">index</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">array</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">U</span><span class="token punctuation">,</span> thisArg<span class="token operator">?</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> value: 当前循环的值， 即 item</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> index: 当前循环的下标, 即 for index</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-6" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-6"> array: 当前的数组</label></li></ul><blockquote><p>注解的内容： 对数组的每个元素调用定义的回调函数，并返回包含结果的数组。 callbackfn 最多接受三个参数的函数。 map 方法为数组中的每个元素调用一次 callbackfn 函数。 thisArg 在 callbackfn 函数中 this 关键字可以引用的对象。如果省略 thisArg，则使用 undefined 作为 this 值。</p></blockquote><h3 id="demo-1" tabindex="-1"><a class="header-anchor" href="#demo-1" aria-hidden="true">#</a> Demo</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
  1 0 [ &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39; ]
  2 1 [ &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39; ]
  3 2 [ &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39; ]
  4 3 [ &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39; ]
**/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array-map-结合-parseint" tabindex="-1"><a class="header-anchor" href="#array-map-结合-parseint" aria-hidden="true">#</a> Array.map 结合 parseInt</h2><h3 id="经典案例" tabindex="-1"><a class="header-anchor" href="#经典案例" aria-hidden="true">#</a> 经典案例</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="解读" tabindex="-1"><a class="header-anchor" href="#解读" aria-hidden="true">#</a> 解读</h3><ul><li>Array.map(): 在循环时， 会循环四次，而 parseInt 则有俩个参数;</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, NaN, NaN, NaN]</span>

<span class="token doc-comment comment">/**
parseInt(1, 0)
parseInt(2, 1)
parseInt(3, 2)
parseInt(4, 3)
**/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可能说明是不正确的； 个人认为： 前面的字符开数需要小于基数;</p></blockquote><ul><li>parseInt(1, 0) 则是按照 10 进制转换</li><li>parseInt(2, 1) 基数应该是 2-36 范围的数， 则为 NaN</li><li>parseInt(3, 2) 2 进制只有 0 和 1， 所以 3 为非法字符</li><li>parseInt(4, 3) 3 基数只可以是字符 0, 1, 2 开头的字符</li></ul>`,28),i=[c];function p(l,o){return s(),n("div",null,i)}const r=a(t,[["render",p],["__file","parseInt-map.html.vue"]]);export{r as default};
