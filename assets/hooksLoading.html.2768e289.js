import{_ as n,X as s,Y as a,a2 as t}from"./framework.ba356234.js";const e="/assets/images/hooks_loading.svg",o={},p=t('<div class="custom-container tip"><p class="custom-container-title">一个 vue 的小工具</p><p>项目中有这杨的一个场景，请求或者操作一些按钮需要加一个<code>loading</code>的效果，但对于一个成熟的系统来说, 那不会仅仅一个页面或者一个功能有<code>Loading</code>吧； 因为涉及到很多的页面与功能，总不会在每一个页面定义一个变量一个方法， 但是对于这样的优化怎么进行处理呢?</p></div><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>基于 vue3 部署项目，对于中后台来讲，最常见的组件就是 按钮和表格了，但是为了优化效果一般都会选择适用 Loading 动画展示， 但是频繁使用 Loading 效果的话，会导致一个问题 ，如果一个页面多个 Loading 动画呢？ 难不成要定义多个变量去使用嘛？</p><p>这样导致代码的冗余性以及维护的艰难性，并且对于同一个页面尽量使用 一个 Loading 动画， 如果多个的话，可以联同一个去使用；</p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景?</h2><ul><li>分页表格， 数据等待加载</li><li>按钮点击等待数据提交</li><li>骨架屏的加载</li><li>查询按钮 连同 分页表格数据的展示</li></ul><h2 id="如何优化处理" tabindex="-1"><a class="header-anchor" href="#如何优化处理" aria-hidden="true">#</a> 如何优化处理?</h2><p>在处理之前，我们可以想象，是否可以创建一个小工具，而这个工具就是为了加载 loading 效果而实现的，在这之前，并不需要每个页面都 定义变量或者方法;</p><p>首先在 <code>src</code> 目录下，创建目录 hooks，接着创建 <code>loading.js</code>，这个文件适用于展示按钮，表格 <code>Loading</code> 状态效果；</p><p>创建响应式 <code>proxy</code> 数据， <code>const loading = ref(false)</code>，对于 <code>Loading</code> 我们有默认值，可以修改，可以切换；</p><p>基于以上几点，进行扩展性的封装；</p><p>首先，创建一个方法 <code>useLoading</code>，参数为 <code>initValue = false</code>，默认值为 <code>false</code>， 代表 初始化的 <code>loading</code> 的状态为 <code>false</code>，</p><p>接着，编写俩个方法，去修改 <code>loading</code> 的值和切换；</p><h2 id="加载过程" tabindex="-1"><a class="header-anchor" href="#加载过程" aria-hidden="true">#</a> 加载过程</h2><figure><img src="'+e+`" alt="加载过程图" tabindex="0" loading="lazy"><figcaption>加载过程图</figcaption></figure><h2 id="代码封装" tabindex="-1"><a class="header-anchor" href="#代码封装" aria-hidden="true">#</a> 代码封装</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">userLoading</span><span class="token punctuation">(</span><span class="token parameter">initVal <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token function-variable function">setLoading</span> <span class="token operator">=</span> <span class="token parameter">loading</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		loading<span class="token punctuation">.</span>value <span class="token operator">=</span> loading<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token function-variable function">toggleLoading</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		loading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">!</span>loading<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token punctuation">{</span>
		loading<span class="token punctuation">,</span>
		setLoading<span class="token punctuation">,</span>
		toggleLoading<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> useLoading <span class="token keyword">from</span> <span class="token string">&quot;./userLoading&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
	<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 初始化loading为false. 即不显示loading</span>
		<span class="token keyword">const</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> setLoading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 模拟点击事件</span>
		<span class="token keyword">const</span> <span class="token function-variable function">clickBtn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token comment">// 点击按钮设为true</span>
			<span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 模拟请求， 3s 之后 loading关闭</span>
			<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				<span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>

		<span class="token keyword">return</span> <span class="token punctuation">{</span>
			laoding<span class="token punctuation">,</span>
			clickBtn<span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),c=[p];function i(l,u){return s(),a("div",null,c)}const r=n(o,[["render",i],["__file","hooksLoading.html.vue"]]);export{r as default};
