import{_ as n,X as s,Y as a,a2 as e}from"./framework.ba356234.js";const t={},p=e(`<div class="custom-container tip"><p class="custom-container-title">🌏 简单介绍</p><p>💡 前段时间线下了解并实战了一些 <code>TypeScript</code>，逐步对 <code>TS</code> 有了基本了解， 但对于公司老项目而言，仅仅是将 <code>Node</code> 作为前端页面的路由转换器；其他的一些就没涉及到； 最近对 <code>nest</code> 比较好奇，今天使用了一下，感觉还是不错的，<code>nest+ts</code> 的同时使用，个人感觉就是类似于 <code>express</code> 但完全不同，难度不太大，基本上就可以直接上手操作一些简单的；</p></div><h2 id="框架简介" tabindex="-1"><a class="header-anchor" href="#框架简介" aria-hidden="true">#</a> 框架简介</h2><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> Nest 是为了构建高效可扩展的 Nodejs 服务端的应用框架，内置完全支持 ts；</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> Nest 框架底层 HTTP 平台默认是基于 Express 实现的，所以无需担心第三方库的缺失。 Nest 旨在成为一个与平台无关的框架。 通过平台，可以创建可重用的逻辑部件，开发人员可以利用这些部件来跨越多种不同类型的应用程序。 nest 目前有两个支持开箱即用的 HTTP 平台：express 和 fastify 可以在项目中直接引入。</label></li></ul><p>关于如何创建项目，命令行就在这里不介绍了；像前端的命令行基本都是一致的；</p><p>项目文件的介绍在官网查阅；</p><h2 id="对于启动项目的理解" tabindex="-1"><a class="header-anchor" href="#对于启动项目的理解" aria-hidden="true">#</a> 对于启动项目的理解</h2><p>有一个项目入口文件，<code>main.ts</code>；通过内置命令创建一个端口<code>3000</code>的服务，而引入的<code>module</code>文件指向对于项目文件的<code>module</code>文件；如下代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppController<span class="token punctuation">,</span> UserController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./app.controller&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 这里是我自定义写了一个简单的控制器</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UserService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./app.user&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./app.service&quot;</span><span class="token punctuation">;</span>

@<span class="token function">Module</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">imports</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token comment">// 引入controller控制器</span>
	<span class="token literal-property property">controllers</span><span class="token operator">:</span> <span class="token punctuation">[</span>AppController<span class="token punctuation">,</span> UserController<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token comment">// 引入指向controller控制器的方法</span>
	<span class="token literal-property property">providers</span><span class="token operator">:</span> <span class="token punctuation">[</span>AppService<span class="token punctuation">,</span> UserService<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 导出 方便在main.js 调用</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中引入的模块是以数组的形式存在的，可以引入不同的控制器；</p><p>当然我们在新建一个新的控制器，目的是为了查询数据库里的用户信息；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token comment">// app.controller.ts</span>
@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span><span class="token punctuation">{</span>
  <span class="token comment">// 指向的UserService类</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">private</span> readonly userService<span class="token operator">:</span> UserService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>

  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;findOne&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 这个接口需要接受的参数</span>
  <span class="token function">findUser</span><span class="token punctuation">(</span><span class="token parameter">@<span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> query<span class="token operator">:</span> any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>



<span class="token comment">// app.user.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>Injectable<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span>

@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span>
  <span class="token comment">// 接受id</span>
  <span class="token function">findAll</span><span class="token punctuation">(</span>sid<span class="token operator">:</span> string<span class="token punctuation">)</span> <span class="token operator">:</span>string <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sid <span class="token operator">===</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&#39;123456&#39;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token string">&#39;not 123456&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单介绍一下， 后期等用到真正开发的时候具体说明； 仅仅做一个文档记录看法；</p><h2 id="个人观点" tabindex="-1"><a class="header-anchor" href="#个人观点" aria-hidden="true">#</a> 个人观点</h2><ul><li>使用 ts 更好的确定数据类型，不会做一些没必要的逻辑</li><li>代码明确，看上去类似于 java；又和加 java 不同；</li></ul>`,14),c=[p];function o(i,l){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","nest.html.vue"]]);export{r as default};
