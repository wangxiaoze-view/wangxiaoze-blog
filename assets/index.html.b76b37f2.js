import{_ as l,X as i,Y as c,Z as s,a1 as t,a3 as n,a2 as o,y as p,$ as e}from"./framework.ba356234.js";const d={},k=o(`<div class="custom-container info"><p class="custom-container-title">常用浏览器以及其渲染引擎</p><p>前端都知道，枯燥的代码在浏览器能显示不同的效果，离不开浏览器的内核「渲染引擎， 负责读取网页的内容，整理信息，计算网页的显示方式以及显示页面」, 在这之前，需要了解浏览器以及内核处理；</p></div><table><thead><tr><th>浏览器</th><th>内核</th><th>备注</th></tr></thead><tbody><tr><td>IE</td><td>Trident</td><td>IE, 猎豹， 360， 百度浏览器</td></tr><tr><td>firefox</td><td>Gecko</td><td>火狐</td></tr><tr><td>safari</td><td>webkit</td><td>苹果浏览器</td></tr><tr><td>chrome/Opera</td><td>blink</td><td>blink是webkit的分支</td></tr></tbody></table><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> IE</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 火狐「firefox」</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 谷歌「Chorme」 开发人员的最爱！</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> Safari</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> Opera</label></li></ul><h2 id="web标准" tabindex="-1"><a class="header-anchor" href="#web标准" aria-hidden="true">#</a> web标准</h2><blockquote><p>简单的说，<code>web标准「万维网联盟是著名的标准化组织」</code>就是规定标准的集合</p></blockquote><h3 id="为什么需要web标准" tabindex="-1"><a class="header-anchor" href="#为什么需要web标准" aria-hidden="true">#</a> 为什么需要web标准</h3><p>浏览器不同，展示的页面或者样式排版就会有兼容差异问题；简而言之，<code>web标准可以让不同的开发者在不同的渲染引擎达到标准，统一的页面；</code></p><p>同时<code>web标准</code>还有以下优点：</p><ol><li>优化web发展前景</li><li>内容可以更广泛的被不同设备访问</li><li>利于搜索引擎的搜索</li><li>便于维护网站，提升页面浏览的速度</li></ol><h3 id="web-标准的构成" tabindex="-1"><a class="header-anchor" href="#web-标准的构成" aria-hidden="true">#</a> web 标准的构成</h3><p>主要包含 <code>结构（html）, 表现(css)和行为(js)</code> 三个方面！</p><ol><li>「结构」：对网页标签元素的整理与分类，语义化标签的html</li><li>「表现」：网页元素的排版，文字颜色，字体大小等等</li><li>「行为」：网页模型的交互</li></ol><p>对于标准化而言，就是将三方面进行拆分；</p><h2 id="html-的语法规范" tabindex="-1"><a class="header-anchor" href="#html-的语法规范" aria-hidden="true">#</a> Html 的语法规范</h2><p>html也成为超文本标记语言， 对于文本标记， 那很简单，就是由一堆标签组成， 在标签中添加文本，属性，以及图片等等； 由这些标记标签组合起来的就是一个html, 而对html也是有一个语法规范，即：由<code>&lt;</code>开始到<code>&gt;</code>结束， 大部分情况是成对出现的， 部分标签是单个的；</p><p>对于标签的关系无非就俩种， 一个包含， 一种并列； 包含很好理解，就是一个父标签里面可以有多个子标签，这样的集合叫做包含，而并列，那就是一个父标签并列的有兄弟标签，可以参考以下html标签；</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>
<span class="token comment">&lt;!-- 这种情况是包含 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>


<span class="token comment">&lt;!-- 这种情况是并列 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="html基本结构标签" tabindex="-1"><a class="header-anchor" href="#html基本结构标签" aria-hidden="true">#</a> html基本结构标签</h3><ul><li>「html」标签：网页中最大的标签， 成为根标签</li><li>「head」标签：网页的头部标签 需要设置title</li><li>「title」标签：网页的标题</li><li>「body」标签：身体部分，页面的内容</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>website title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="doctype-标签" tabindex="-1"><a class="header-anchor" href="#doctype-标签" aria-hidden="true">#</a> &lt;!DOCTYPE&gt; 标签</h3><p>文档类型的声明标签， 就是告诉浏览器用的哪种html的版本来显示网页的；</p><p><code>&lt;!DOCTYPE html&gt;</code> 告诉浏览器，采取的是html5最新版本来显示的；</p><p>该代码需要写在文件的首行！</p><h3 id="lang语言" tabindex="-1"><a class="header-anchor" href="#lang语言" aria-hidden="true">#</a> lang语言</h3><p>定义当前文档的显示语言「en：英文 or zh-CN：中文」， 定义中文可以编写英文， 定义写英文也可以显示中文，对于浏览器仅仅作为提示，在搜索引擎有 一定的作用；</p><h3 id="charset-字符集" tabindex="-1"><a class="header-anchor" href="#charset-字符集" aria-hidden="true">#</a> charset 字符集</h3><p>字符集，便于浏览器能够识别和存储各种文字； 如果不声明的情况可能会出现乱码问题！</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="语义标签-即标签的含义" tabindex="-1"><a class="header-anchor" href="#语义标签-即标签的含义" aria-hidden="true">#</a> 语义标签，即标签的含义</h3><h4 id="为什么要用到语义标签" tabindex="-1"><a class="header-anchor" href="#为什么要用到语义标签" aria-hidden="true">#</a> 为什么要用到语义标签？</h4><p>拿个例子🌰来说吧， 就是网页中显示了一段文字， 但是这段文字一眼看上去就是密密麻麻的一堆，没有段落显示，也没有标题，让人看起来很难受；</p><p>而这时，我需要对这段文字进行优化，要显示不同的段落，标题，这里就体现出了语义标签的优点，更清晰明了的展示了内容模块，有标题，段落看上去 更舒服；即：<code>在合适的地方添加一个合理的标签， 可以让页面结构更清晰！</code></p><h2 id="标签的整理" tabindex="-1"><a class="header-anchor" href="#标签的整理" aria-hidden="true">#</a> 标签的整理</h2><div class="custom-container info"><p class="custom-container-title">标记标签的整理</p><p>对于标签的理解以及使用，我会以文档的形式进行记录，以下标签已整理：</p></div>`,35),h={class:"task-list-container"},u={class:"task-list-item"},r=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-5",checked:"checked",disabled:"disabled"},null,-1),m={class:"task-list-item-label",for:"task-item-5"},b={class:"task-list-item"},g=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-6",checked:"checked",disabled:"disabled"},null,-1),v={class:"task-list-item-label",for:"task-item-6"},_={class:"task-list-item"},x=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-7",checked:"checked",disabled:"disabled"},null,-1),f={class:"task-list-item-label",for:"task-item-7"},y={class:"task-list-item"},w=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-8",checked:"checked",disabled:"disabled"},null,-1),C={class:"task-list-item-label",for:"task-item-8"},E={class:"task-list-item"},q=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-9",checked:"checked",disabled:"disabled"},null,-1),N={class:"task-list-item-label",for:"task-item-9"},T={class:"task-list-item"},O=s("input",{type:"checkbox",class:"task-list-item-checkbox",id:"task-item-10",checked:"checked",disabled:"disabled"},null,-1),V={class:"task-list-item-label",for:"task-item-10"};function B(I,Y){const a=p("RouterLink");return i(),c("div",null,[k,s("ul",h,[s("li",u,[r,s("label",m,[t(a,{to:"/html/h1-h6.html"},{default:n(()=>[e("标题标签")]),_:1})])]),s("li",b,[g,s("label",v,[t(a,{to:"/html/p.html"},{default:n(()=>[e("段落标签")]),_:1})])]),s("li",_,[x,s("label",f,[t(a,{to:"/html/text.html"},{default:n(()=>[e("文本")]),_:1})])]),s("li",y,[w,s("label",C,[t(a,{to:"/html/box.html"},{default:n(()=>[e("盒子")]),_:1})])]),s("li",E,[q,s("label",N,[t(a,{to:"/html/image.html"},{default:n(()=>[e("图片")]),_:1})])]),s("li",T,[O,s("label",V,[t(a,{to:"/html/table.html"},{default:n(()=>[e("表格")]),_:1})])])])])}const L=l(d,[["render",B],["__file","index.html.vue"]]);export{L as default};
